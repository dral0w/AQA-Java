/*
Создать классы Собака и Кот с наследованием от класса Животное.

Все животные могут бежать и плыть. В качестве параметра каждому методу передается длина препятствия.
Результатом выполнения действия будет печать в консоль. (Например, dogBobik.run(150); -> 'Бобик пробежал 150 м.');

У каждого животного есть ограничения на действия (бег: кот 200 м., собака 500 м.; плавание: кот не умеет плавать, собака 10 м.).

Добавить подсчет созданных котов, собак и животных.

Расширить задачу про котов и тарелки с едой, выполнив следующие пункты:

    Сделать так, чтобы в тарелке с едой не могло получиться отрицательного количества еды (например, в миске 10 еды, а кот пытается покушать 15-20).
    Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны). Если коту удалось покушать (хватило еды), сытость = true.
    Считаем, что если коту мало еды в тарелке, то он её просто не трогает, то есть не может быть наполовину сыт (это сделано для упрощения логики программы).
    Создать массив котов и тарелку с едой, попросить всех котов покушать из этой тарелки и потом вывести информацию о сытости котов в консоль.
    Добавить в тарелку метод, с помощью которого можно было бы добавлять еду в тарелку.

Задание 2:
Применяя интерфейсы написать программу расчета периметра и площади геометрических фигур: круг, прямоугольник, треугольник.
Задать для каждой фигуры цвет заливки и цвет границы.
Результат полученных характеристик [ Периметр, площадь, цвет фона, цвет границ ] по каждой фигуре вывести в консоль.


Попробуйте реализовать базовые методы, такие как расчет периметра фигур, в качестве дефолтных методов в интерфейсе.
 */
package com.company;

public class Main {

    public static void main(String[] args) {
        Cat[] cats = new Cat[]{new Cat(), new Cat(), new Cat()};
        Cat.Plate plate = new Cat.Plate();
        plate.addFood(20);
        cats[0].eat(plate, 7);
        cats[1].eat(plate, 9);
        cats[2].eat(plate, 5);
        for (Cat cat : cats) {
            System.out.println(cat.isFull());
        }

        Circle circle = new Circle(2);
        Rectangle rectangle = new Rectangle(2, 4);
        Triangle triangle = new Triangle(7, 9, 14);

        circle.setColor("red");
        circle.setBorderColor("black");

        rectangle.setColor("blue");
        rectangle.setBorderColor("yellow");

        triangle.setColor("orange");
        triangle.setBorderColor("green");

        circle.getInformation();
        rectangle.getInformation();
        triangle.getInformation();
    }
}
